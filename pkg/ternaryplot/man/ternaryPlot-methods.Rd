% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/ternaryplot.R
\name{ternaryPlot}
\alias{ternaryPlot}
\alias{ternaryPlot.character}
\alias{ternaryPlot.ternarySystem}
\title{Generic ternary-data plotting}
\usage{
ternaryPlot(s, ...)

\method{ternaryPlot}{character}(s, ...)

\method{ternaryPlot}{ternarySystem}(s, x = NULL, scale = FALSE, ...)
}
\arguments{
\item{s}{Either a character string naming the ternary classification
 system to be used (if pre-defined) or a
 \code{\link[ternaryplot]{ternarySystem}} object.}

\item{x}{A \code{\link[base]{data.frame}} or a \code{\link[base]{matrix}}
 containing point ternary data (x-y-x) to be ploted on the graph.
 It should contain the 3 columns names given in \code{s}. If
 missing, only the ternary classification is drawn.}

\item{scale}{Either a logical value or a \code{\link[base]{data.frame}} with
 3 columns and 2 rows. If \code{TRUE}, the triangle plot will
 be scaled to fit the data. If \code{FALSE}, no scaling is
 performed, and the full extent triangle plot is drawn. If a
 \code{data.frame}, contains the min and max limits of each
 of the 3 variables (columns = variables, rows = min and max).}

\item{\dots}{Additional parameters passed to specific methods.}
}
\description{
Generic ternary-data plotting
}
\examples{

library( "ternaryplot" ) 


# Split the window in 4 sub-plots
# -------------------------------

#   Save and then set graphical parameters
op <- par( no.readonly = TRUE ) 
par( mfrow = c(2,2), cex = .5 )

# par( mar = c(3,2,0,2)+.1 ) # for larger triangles


# Default ternary plot
# ====================

s <- ternaryPlot() 


# Change axis orientation (clockwise vs counter-clockwise)
# ========================================================

# Set new orientation
blrClock( s ) <- rep( FALSE, 3 ) 

# Plot
ternaryPlot(s) 


# Change axis orientation and frame angles
# ========================================

# Set new orientation and angles
blrClock( s )  <- c( FALSE, TRUE, NA ) 
tlrAngles( s ) <- c( 45, 90, 45 ) 

# Plot
ternaryPlot(s) 


# Same, other direction
# =====================

blrClock( s ) <- c( TRUE, NA, FALSE ) 
tlrAngles( s ) <- c(45,45,90) 

ternaryPlot(s) 


# reset par
par( op )


# Custom colors
# =============

#   Set general graphical parameters (enlarged plot)
par( fg = "darkred", col.lab = "darkblue", mar = c(3,2,0,2)+.1 ) 
    # mar = c(bottom, left, top, right) 

#   Set specific graphical parameters
tpPar( grid.line.col = "white", arrowsBreak = FALSE, 
    plot.bg = gray( .95 ) )

ternaryPlot()


# reset par
par( op )
tpPar( reset = TRUE )
}

